trigger:
  branches:
    include:
    - main
    - release/*
  tags:
    include:
    - '*'
  paths:
    exclude:
      - README.md

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Build
    jobs:
    - job: Build_Dist
      displayName: 'Generate drop artifact'
      pool:
       vmImage: ubuntu-latest

      steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: 3.7

      - script: |
          python -m pip install --upgrade pip wheel
          pip install poetry
          poetry install
        displayName: 'Install software'

      - script: |
           poetry version $(build.SourceBranchName)
        displayName: Update pyproject.toml to $(build.SourceBranchName)
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')

      - task: PowerShell@2
        displayName: Update README.md with absolute paths
        inputs:
          targetType: 'inline'
          script: |
            # The README.md gets published and is what folks see on the PyPi/project/pysafeguard so the relative paths
            # must be updated to absolute paths.
            
            $file = "README.md"
            (Get-Content $file).replace('<a href="samples">sample projects</a>', "[sample projects](https://github.com/OneIdentity/PySafeguard/tree/release/$Env:BUILD_SOURCEBRANCHNAME/samples)") | Set-Content $file
            (Get-Content $file).replace('<a href="samples\PasswordExternalExample.py">here</a>', "[here](https://github.com/OneIdentity/PySafeguard/tree/release/$Env:BUILD_SOURCEBRANCHNAME/samples/PasswordExternalExample.py)") | Set-Content $file
            (Get-Content $file).replace('<a href="samples\PasswordExample.py">here</a>', "[here](https://github.com/OneIdentity/PySafeguard/tree/release/$Env:BUILD_SOURCEBRANCHNAME/samples/PasswordExample.py)") | Set-Content $file
            (Get-Content $file).replace('<a href="samples\AnonymousExample.py">here</a>', "[here](https://github.com/OneIdentity/PySafeguard/tree/release/$Env:BUILD_SOURCEBRANCHNAME/samples/AnonymousExample.py)") | Set-Content $file
            (Get-Content $file).replace('<a href="samples\SignalRExample.py">here</a>', "[here](https://github.com/OneIdentity/PySafeguard/tree/release/$Env:BUILD_SOURCEBRANCHNAME/samples/SignalRExample.py)") | Set-Content $file
            (Get-Content $file).replace('<a href="samples\NewUserExample.py">here</a>', "[here](https://github.com/OneIdentity/PySafeguard/tree/release/$Env:BUILD_SOURCEBRANCHNAME/samples/NewUserExample.py)") | Set-Content $file
          failOnStderr: true
          condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
          
      - script: |
         poetry build
        displayName: Build PyPi dist

      - task: CopyFiles@2
        displayName: 'Copy dist to artifact staging directory'
        inputs:
          SourceFolder: '$(build.sourcesdirectory)'
          Contents: |
            dist/*
          TargetFolder: '$(build.artifactstagingdirectory)'
        condition: succeededOrFailed()

      - task: PublishPipelineArtifact@0
        displayName: 'Publish pipeline artifact'
        inputs:
          artifactName: 'drop'
          targetPath: '$(Build.ArtifactStagingDirectory)'
        condition: succeededOrFailed()
    
    # This stage will publish to PyPi if this build was 
    # triggered by someone publishing a release with a GitHub tag
  - stage: Release
    dependsOn: Build
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))

    jobs:
    - job: Publish_to_PyPi
      steps:
      - download: 'current'
        artifact: 'drop'
        displayName: 'Download artifacts for release build due to tag'
     
      - script: |
          python -m pip install --upgrade pip
          pip install twine
        displayName: 'Install twine'

      # Set pythonUploadServiceConnection: testPypiTania if you want to test a PyPi push
      # but not actually push a project to PyPi OneIdentity. See Project Settings->Service Connections.
      - task: TwineAuthenticate@1
        displayName: Twine Authenticate
        inputs:
          pythonUploadServiceConnection: pypiOneIdentity
    
      - script: |
          twine upload --verbose --config-file $(PYPIRC_PATH) $(Pipeline.Workspace)/drop/dist/*
        displayName: Upload release to PyPi OneIdentity