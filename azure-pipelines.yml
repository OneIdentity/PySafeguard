trigger:
- main

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Build
    jobs:
    - job: Build_Dist
      displayName: 'Generate drop artifact'
      pool:
       vmImage: ubuntu-latest

      steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: 3.7
      - task: gitversion/setup@0
        displayName: Install GitVersion
        inputs:
          versionSpec: '5.5.0'
          
      - task: gitversion/execute@0
        displayName: Determine Version

      - script: |
          echo BranchName: $(GitVersion.BranchName)
          echo MajorMinorPatch: $(GitVersion.MajorMinorPatch)
          echo SemVer: $(GitVersion.SemVer)
          echo AssemblySemVer: $(GitVersion.AssemblySemVer)
          echo FullSemVer: $(GitVersion.FullSemVer)
          echo InformationalVersion: $(GitVersion.InformationalVersion)

      - script: echo %Action%%BuildVersion%
        displayName: 'Set build version to $(GitVersion.MajorMinorPatch)'
        env:
          Action: '##vso[build.updatebuildnumber]'
          BuildVersion: $(GitVersion.MajorMinorPatch)

      - script: |
          python -m pip install --upgrade pip wheel
          pip install poetry
          poetry install
        displayName: 'Install software'

      - bash: echo Setting $(BuildVersion) in pyproject.toml using poetry
      - script: |
         poetry version $(BuildVersion)
         poetry build
        displayName: Build PyPi dist $(BuildVersion)

      - task: CopyFiles@2
        displayName: 'Copy dist to artifact staging directory'
        inputs:
          SourceFolder: '$(build.sourcesdirectory)'
          Contents: |
            dist/*
          TargetFolder: '$(build.artifactstagingdirectory)'
        condition: succeededOrFailed()

      - task: PublishPipelineArtifact@0
        displayName: 'Publish pipeline artifact'
        inputs:
          artifactName: 'drop'
          targetPath: '$(Build.ArtifactStagingDirectory)'
        condition: succeededOrFailed()
    
  - stage: Release
    dependsOn: Build
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), startswith(variables['Build.SourceBranch'], 'refs/heads/release'))

    jobs:
    - job: Publish_to_PyPi
      steps:
      - download: 'current'
        artifact: 'drop'
        displayName: 'Download artifacts'
     
      - script: |
          python -m pip install --upgrade pip
          pip install twine
        displayName: 'Install twine'

      - task: TwineAuthenticate@1
        displayName: Twine Authenticate
        inputs:
          pythonUploadServiceConnection: testPypiTania
    
      - script: |
          twine upload -r testpypi --verbose --config-file $(PYPIRC_PATH) dist/*
        displayName: Upload package to testpypi