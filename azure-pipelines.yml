trigger:
  branches:
    include:
    - main
  tags:
    include:
    - 'v*'

  paths:
    exclude:
      - README.md

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Build
    jobs:
    - job: Build_Dist
      displayName: 'Generate drop artifact'
      pool:
       vmImage: ubuntu-latest

      steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: 3.7

      - task: gitversion/setup@0
        displayName: Setup GitVersion
        inputs:
          versionSpec: '5.x'
          ignoreFailedSources: true
          
      - task: gitversion/execute@0
        displayName: Determine Version

      - script: |
          echo BranchName: $(GitVersion.BranchName)
          echo MajorMinorPatch: $(GitVersion.MajorMinorPatch)
          echo SemVer: $(GitVersion.SemVer)
          echo AssemblySemVer: $(GitVersion.AssemblySemVer)
          echo FullSemVer: $(GitVersion.FullSemVer)
          echo InformationalVersion: $(GitVersion.InformationalVersion)

      - script: |
          python -m pip install --upgrade pip wheel
          pip install poetry
          poetry install
        displayName: 'Install software'

      - bash: echo Setting $(GitVersion.MajorMinorPatch) in pyproject.toml using poetry

      - script: |
         poetry version $(GitVersion.MajorMinorPatch)
         poetry build
        displayName: Build PyPi dist

      - task: CopyFiles@2
        displayName: 'Copy dist to artifact staging directory'
        inputs:
          SourceFolder: '$(build.sourcesdirectory)'
          Contents: |
            dist/*
          TargetFolder: '$(build.artifactstagingdirectory)'
        condition: succeededOrFailed()

      - task: PublishPipelineArtifact@0
        displayName: 'Publish pipeline artifact'
        inputs:
          artifactName: 'drop'
          targetPath: '$(Build.ArtifactStagingDirectory)'
        condition: succeededOrFailed()
    
    # This stage will publish to PyPi if this build was 
    # triggered by someone publishing a release with a GitHub tag starting with "v"
  - stage: Release
    dependsOn: Build
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'refs/tags/v'))

    jobs:
    - job: Publish_to_PyPi
      steps:
      - download: 'current'
        artifact: 'drop'
        displayName: 'Download artifacts for release build due to tag'
     
      - script: |
          python -m pip install --upgrade pip
          pip install twine
        displayName: 'Install twine'

      # Set pythonUploadServiceConnection: testPypiTania if you want to test a PyPi push
      # but not actually push a project to PyPi OneIdentity. See Project Settings->Service Connections.
      - task: TwineAuthenticate@1
        displayName: Twine Authenticate
        inputs:
          pythonUploadServiceConnection: pypiOneIdentity
    
      - script: |
          twine upload --verbose --config-file $(PYPIRC_PATH) $(Pipeline.Workspace)/drop/dist/*
        displayName: Upload release to PyPi OneIdentity